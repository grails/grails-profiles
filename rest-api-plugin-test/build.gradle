import org.ajoberstar.grgit.Grgit

plugins {
  id "org.ajoberstar.grgit" version "3.0.0"
  id 'base'
}

ext {
  grailsCoreBranch = 'master'
  grailsWrapperBranch = 'master'
  profilesSlug = 'grails-profiles'
  profiles = [
          'base',
          'plugin',
          'rest-api-plugin',
  ]
}

task deleteProfileApps {
  doLast() {
    profiles.each { new File(it).deleteDir() }
  }
}
clean.dependsOn(deleteProfileApps)

task cloneGrailsWrapper {
  doLast() {
    def grgit = Grgit.clone(dir: "${buildDir}/grails-wrapper".toString(),
            uri: "https://github.com/grails/grails-wrapper.git", refToCheckout: grailsWrapperBranch)
  }
}

task cloneGrailsCore {
  doLast() {
    def grgit = Grgit.clone(dir: "${buildDir}/grails-core".toString(),
              uri: "https://github.com/grails/grails-core.git", refToCheckout: grailsCoreBranch)
  }
}

task cloneProfiles {
  doLast() {
    profiles.each { String profile ->
      def grgit = Grgit.clone(dir: "${buildDir}/${profile}".toString(),
              uri: "https://github.com/${profilesSlug}/${profile}.git", refToCheckout: grailsCoreBranch)
    }
  }
}

task publishBaseProfileToMavenLocal(type: GradleBuild) {
  dependsOn cloneProfiles
  ext {
    profileName = 'base'
  }
  buildFile = "${buildDir}/${profileName}/build.gradle"
  tasks = ['publishToMavenLocal']
}

task publishRestApiPluginProfileToMavenLocal(type: GradleBuild) {
  dependsOn cloneProfiles
  ext {
    profileName = 'rest-api-plugin'
  }
  buildFile = "${buildDir}/${profileName}/build.gradle"
  tasks = ['publishToMavenLocal']
}

task publishPluginProfileToMavenLocal(type: GradleBuild) {
  dependsOn cloneProfiles
  ext {
    profileName = 'plugin'
  }
  buildFile = "${buildDir}/${profileName}/build.gradle"
  tasks = ['publishToMavenLocal']
}

task publishGrailsCoreToMavenLocal(type: GradleBuild) {
  dependsOn cloneGrailsCore
  buildFile = "${buildDir}/grails-core/build.gradle"
  tasks = ['assemble','publishToMavenLocal']
}

task publishReposToMavenLocal {
  dependsOn publishBaseProfileToMavenLocal
  dependsOn publishPluginProfileToMavenLocal
  dependsOn publishRestApiPluginProfileToMavenLocal
  dependsOn publishGrailsCoreToMavenLocal
}

task cloneRepos {
  dependsOn cloneGrailsCore
  dependsOn cloneProfiles
}

task fixTests {
  ext {
    appFolders = [
            'rest-api-plugin',
    ]
    appPackage = 'demo'
    unitTestFolder = 'src/test/groovy/'
    integrationTestFolder = 'src/integration-test/groovy/'
    unitTestName = 'Foo'
    interceptorName = 'Company'
    controllerNames = ['Company', 'Device']
    domainNames = ['Book', 'Employee', 'Device']
    resourceDomainName = 'Car'
    serviceNames = ['Book', 'Device']
    taglibName = 'Currency'
    integrationTest = 'Int'
    functionalTest = 'Func'
  }

  doLast() {
    for (String domainClass : domainNames) {
      String path
      File f = appFolders.collect {
        path = "${it}/grails-app/domain/${appPackage}/${domainClass}.groovy"
        new File(path)
      }.find { it.exists() }
      if (!f) {
        println "${path} does not exists"
        continue
      }
      String text = f.text
      text = text.replace("class ${domainClass} {", "class ${domainClass} {\n   String name")
      f.text = text
    }

    for (String spec : (["${interceptorName}Interceptor",
                        "${taglibName}TagLib",
                        "${resourceDomainName}",
                        "${unitTestName}"] +
            [domainNames] +
            controllerNames.collect { "${it}Controller" } +
            serviceNames.collect { "${it}Service" }
    ).flatten()

    ) {
      String path
      File f = appFolders.collect {
        path = "${it}/${unitTestFolder}/${appPackage}/${spec}Spec.groovy"
        new File(path)
      }.find { it.exists() }
      if (!f) {
        println "${path} does not exists"
        continue
      }
      String text = f.text
      text = text.replace("true == false", "true == true")
      text = text.replace("//params[\"name\"] = 'someValidName'", "params[\"name\"] = 'someValidName'")
      text = text.replace("assert false, \"TODO:", "assert true, \"TODO:")

      f.text = text
    }
    for (String spec : ([integrationTest, functionalTest] + serviceNames.collect { "${it}Service" }).flatten()) {
      String path
      File f = appFolders.collect {
        path = "${it}/${integrationTestFolder}/${appPackage}/${spec}Spec.groovy"
        new File(path) }.find { it.exists() }
      if (!f) {
        println "${path} does not exists"
        continue
      }
      String text = f.text
      text = text.replace("true == false", "true == true")

      Closure randName = { ->
        new Random().with {(1..9).collect {(('a'..'z')).join()[ nextInt((('a'..'z')).join().length())]}.join()}
      }

      text = text.replace("//new ", "new ")
      for ( String serviceName : serviceNames) {
        text = text.replace("//${serviceName}", serviceName)
        text = text.replace("${serviceName} ${serviceName.toLowerCase()} = new ${serviceName}()", "${serviceName} ${serviceName.toLowerCase()} = new ${serviceName}(name: '${randName()}')")
        text = text.replace("//${serviceName.toLowerCase()}", serviceName.toLowerCase())
      }

      while (text.indexOf('...') != -1) {
        String name =
        text = text.replace("(...)", "(name: '${randName()}')")
      }
      text = text.replace("assert false, \"TODO:", "assert true, \"TODO:")

      f.text = text
    }
  }
}

build.dependsOn cloneGrailsWrapper
build.dependsOn cloneRepos
build.dependsOn publishReposToMavenLocal
